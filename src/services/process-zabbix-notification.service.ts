import { plainToInstance } from "class-transformer";
import { ZabbixAnswer } from "../model/zabbix/zabbix-answer.model";
import { queryEventById, queryHostByTriggerId } from "./zabbix.service";
import { InfraEvent, zabbixSeverities } from "../model/infra-event.model";
import { createInfraEvent, createInfraEventWithTransaction } from "../repositories/infra-event.repository";
import { createEquipment } from "../repositories/equipment.repository";
import { sequelize } from "../config/sequelize";


  export async function processZabbixNotification(notification: string): Promise<string> {
  
    /*
  Se recibe algo de esta forma:
  {
    'Problem started at 14:35:00 on 2025.03.13 Problem name: MSSQL: Too many physical reads occurring Host: ubuntutest Severity: Warning Operational data: 0.11641581447693426, 0.11641581447693426 Original problem ID: 15415 ': ''
  }
    */
    try {
      // console.log(notification);

      // obtenemos el id del evento
      const regex = /Original problem ID:\s*(\d+)/;
      const match = JSON.stringify(notification).match(regex);
      
      if (match) {
        const id = match[1];
        console.log(id); // Output: 15415

        // query Zabbix API
        const response = await queryEventById(Number(id));
        // const resp = await QueryZabbixService("1741206721.1499080785");
        const answer: ZabbixAnswer = response.data;
        parseZabbixAnswer(answer);
      } else {
        console.log("No match found");
      }  
    
      return notification;
      
    } catch (error) {
      console.error("Error processing Wazuh notification:", error);
      // Handle the error without crashing the app
      return notification; // Optionally return the notification or a default value
        
    }
  }
  
  export function parseKeyValueString<T>(input: string, clazz: { new (): T }): T {
      const obj = input
        .split(" ") // Split by space
        .map(pair => pair.split("=")) // Split each pair by '='
        .filter(([key, value]) => key && value !== undefined) // Ensure valid pairs
        .reduce((acc, [key, value]) => {
          acc[toCamelCase(key)] = value;
          return acc;
        }, {} as Record<string, string>);
    
      return Object.assign(new clazz() as object, obj) as T; // Assign properties to a new instance of clazz
  }
  
  function toCamelCase(input: string): string {
      return input.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());
  }
  
  async function parseZabbixAnswer(zabbixAnswer: ZabbixAnswer): Promise<InfraEvent | void> {
    // const alertArray: Alert[] = [];

    let infraEvent: InfraEvent = {
      id: "",
      origin: "",
      eventid: "",
      equipment: {
          id: "",
          name: "",
          type: "",
          ip: "",
          hostname: "",
          os: "",
          os_version: "",
      },
      description: "",
      status: "",
      acknowledged: false,
      severity: "",
      timestamp: new Date(),
      detail: "",
    } as unknown as InfraEvent;


    const zabixAns = plainToInstance(ZabbixAnswer, JSON.parse(JSON.stringify(zabbixAnswer)), {
        excludeExtraneousValues: false,
    });

    // console.log(zabixResp);

    if (zabixAns.result && zabixAns.result.length > 0) {

        for (const res of zabixAns.result) {
            if (res.source === "0") {
                // generated by trigger
                const triggerId = res.objectid;

                if (triggerId) {
                    const resp = await queryHostByTriggerId(triggerId);
                    // console.log(pollResp.data);
                    const zabixAns2 = plainToInstance(ZabbixAnswer, JSON.parse(JSON.stringify(resp.data)), {
                        excludeExtraneousValues: false,
                    });

                    if (zabixAns2 && zabixAns2.result && zabixAns2.result.length > 0) {
                        /*
                        const alert: Alert = {
                            id: res.eventid,
                            description: res.name,
                            hostName: zabixAns2.result[0].name,
                            severity: res.severity,
                            clock: res.clock,
                            acknowledged: res.acknowledged,
                            userid: res.userid,
                        };

                        alertArray.push(alert);

                        console.log("alertArray.length: " + alertArray.length);
                        */
                        console.log("Problem");
                        console.log("eventid: " + res.eventid);
                        console.log("source: " + res.source);
                        console.log("objectid: " + res.objectid);
                        console.log("problem name: " + res.name);
                        console.log("host name: " + zabixAns2.result[0].name);
                        console.log("hostid: " + zabixAns2.result[0].hostid);

                        infraEvent = {
                            id: undefined,
                            origin: "zabbix",
                            eventid: res.eventid,
                            equipment: {
                                id: undefined,
                                name: zabixAns2.result[0].name,
                                type: "",
                                ip: "",
                                hostname: zabixAns2.result[0].name,
                                os: "",
                                os_version: "",
                            },
                            description: res.name,
                            status: "active",
                            acknowledged: false,
                            severity: zabbixSeverities[Number(res.severity)].name,
                            timestamp: new Date(Number(res.clock) * 1000),
                            detail: JSON.stringify(res),
                        } as unknown as InfraEvent;
                        console.log("infraEvent:");
                        console.log(infraEvent);
                        // save infraEvent to database
                        // await infraEventRepository.save(infraEvent);
                        // console.log("infraEvent saved to database");

                        // Save the InfraEvent and Equipment to the database
                        try {
                          /*
                          // Save Equipment first
                          if (!infraEvent.equipment) {
                              throw new Error("Equipment data is undefined");
                          }
                          const savedEquipment = await createEquipment(infraEvent.equipment);
                          console.log("Equipment saved to database:", savedEquipment);
                          // Save InfraEvent
                          if (!infraEvent) {
                              throw new Error("InfraEvent data is undefined");
                          }
                          if (savedEquipment && 'id' in savedEquipment) {
                              infraEvent.equipmentId = savedEquipment.id; // Set the foreign key
                          } else {
                              throw new Error("Failed to save equipment or equipment ID is undefined");
                          }
                          infraEvent.equipment = savedEquipment; // Set the equipment object
                          // Save InfraEvent with the foreign key
                          const savedInfraEvent = await createInfraEvent(infraEvent);
                          */
                          const savedInfraEvent = await createInfraEventWithTransaction(infraEvent, sequelize);
                          console.log("InfraEvent saved to database:", savedInfraEvent);
                          return savedInfraEvent;
                        } catch (error) {
                            console.error("Error saving InfraEvent to database:", error);
                            throw error;
                        }

                    }
                }
            }
        }
    }
    
    return infraEvent;
  }